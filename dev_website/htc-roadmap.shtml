<!--#set var="title" value="Roadmap to Running Jobs"-->
<!--#include virtual="/includes/template-1-openhead.shtml" -->
<!--#include virtual="/includes/template-2-opensidebar.shtml" -->
<!--#include virtual="/includes/template-3-sidebar.shtml" -->
<!--#include virtual="/includes/template-4-mainbody.shtml" -->

<p>This guide assumes that you have gotten an account at CHTC 
on the high throughput compute system and are ready to start 
running jobs.  If you do *not* have an account at CHTC (or if you 
aren't sure), fill out the <a href="{{ '/form' | relative_url}}">account request
form</a> or email CHTC's research computing facilitators at 
<a href="">chtc@cs.wisc.edu</a>.  </p>

<h1>1. Accessing the HTC system</h1>

<p>Congratulations!  You now have an account at CHTC on our high throughput 
(HTC) system.  You should have 
gotten an email with your log in information.</p>

<ul>
<li class="spaced"><a href="{{ '/connecting' | relative_url}}">Connecting to CHTC</a>:
This guide has instructions on how 
to log in, move files to and from the submit server, and use other command 
line skills.</li>
</ul>

<h1>2. Learning about HTCondor</h1>

Once you have logged in, we recommend learning about job submission using 
HTCondor.  

<ul>
<li class="spaced"><a href="{{ '/hello-world' | relative_url}}">Hello World</a>: Run a simple HTCondor job.</li>
<li class="spaced"><a href="{{ '/condor_q' | relative_url}}">condor_q</a>: Learn about some of the different
options for <code>condor_q</code></li>
</ul>

<h1>3. Preparing a Single Job</h1>

<p>Once you've tried using HTCondor, the next step is to 
prepare a single job to run on the HTC system. </p>

<h2>A. Choose a Job Size and Submit File</h2>

<p></p>

<h2>B. Prepare Your Software</h2>

<p>A big part of getting your first job running is setting up 
your software.  If you can download your program as a set of 
compiled binaries, you can use those.  For specific scripting 
languages or programs or using Docker containers, we have the following guides:</p>

<ul>
	<li class="spaced"><a href="{{ '/python-jobs' | relative_url}}">Running Python Jobs</a>: Run Python code or scripts in CHTC</li>
	<li class="spaced"><a href="{{ '/r-jobs' | relative_url}}">Running R Jobs</a>: Run R code or scripts in CHTC </li>
	<li class="spaced"><a href="{{ '/matlab-jobs' | relative_url}}">Running Matlab Jobs</a>: Run Matlab code or scripts in CHTC </li>
	<li class="spaced"><a href="{{ '/docker-jobs' | relative_url}}">Using Docker to Run Jobs</a>: Use Docker containers to run software in CHTC</li>
</ul>

<p>If your program has to be compiled from source code, follow the instructions
in our <a href="{{ '/inter-submit' | relative_url}}">Build Job guide</a>.

<h2>C. Prepare Your Data</h2>

<p>Look at our <a href="{{ '/file-availability' | relative_url}}">File Availability page</a> to determine
what method is best to handle your data.  If you need access to 
Squid or Gluster, email the CHTC facilitators.</p>

<ul>
	<li class="spaced"><a href="{{ '/file-availability' | relative_url}}">Using Default File Transfer</a>: HTCondor's default method of handling files</li>
	<li class="spaced"><a href="{{ '/file-avail-squid' | relative_url}}">Using Squid</a>: Web server for repeated, medium-sized downloads</li>
	<li class="spaced"><a href="{{ '/file-avail-gluster' | relative_url}}">Using Gluster</a>: File share for large files</li>
</ul>

<h1>4. Testing and Scaling Up</h1>

<p>Once you've assembled most of the pieces you need for your job, the next 
step is to test what you've created and eventually submit a full batch of jobs</p>

<ul>
<li class="spaced"><a href="{{ '/testing' | relative_url}}">Testing Job Submissions and Scaling Up</a>: Test
and responsibly scale up to many jobs</li>
</ul>

<p><b>Why test?</b> Spending the time and effort to run test jobs will pay off in more 
effective high-throughput computing in the following ways: </p>

<ul>
   <li> <b>Better matching:</b> Pinpointing the required amount of memory/disk space 
   will allow your jobs to match to as many computers as possible.  
   Requesting excessive amounts of memory and disk space will 
   limit the number of slots where your jobs can run, as 
   well as using unnecessary space that could be available for other users.  
   That said...</li>
   <li> <b>Fewer holds or evictions:</b> If you don't request *enough* memory or 
   disk and your job exceeds its request, it can go on hold.  Jobs that have 
   not been tested and run over 72 hours are liable to be evicted without 
   finishing.  </li>
   <li> <b>Fewer wasted compute hours:</b> the evictions and holds described 
   above will be wasted compute hours, decreasing your priority in the 
   high-throughput system while not returning any results.  </li>
   <li> <b>Making good choices:</b> knowing how big and how long your jobs are, 
   and the size of input/output files will show you how to most 
   effectively use CHTC resources.  Jobs under 2 hrs or so?  
   Allow your jobs to flock and glide to the UW Grid and Open Science Grid.  
   Input files of more than 5 GB?  You should probably be using the CHTC 
   large file staging area.  Longer jobs?  Include a line in your submit 
   file restricting your jobs to the CHTC servers that guarantee 72 hours.  </li>
	<li><b>Being a good citizen</b>:CHTC's high-throughput system has 
	hundreds to thousands of users, 
	meaning that poor computing practices by one user can impact many other users.  
	Users who submit jobs that don't finish or are evicted because of incorrect 
	memory requests are using hours that could have been used by other people.  
	In the worst case, untested code can cause other jobs running on an execute 
	server to be evicted, directly harming someone else's research process.  
	The best practices listed in these guides exist for a reason.  Testing your 
	code and job submissions to make sure they abide by CHTC recommendations 
	will not only benefit your own throughput but make sure that everyone else 
	is also getting a fair share of the resource.  </li>
</ul>

See our <a href="{{ '/troubleshooting' | relative_url}}">troubleshooting</a> guide for ongoing support.

<!--<h2>5. Expanding Your Limits</h2> -->

<!--<h2>A. Use More Resources</h2>

OSG Guide -->

<!--<h2>B. Create a Workflow (optional)</h2>

DAG guide -->

<!--#include virtual="/includes/template-5-finish.shtml" -->
