<!--#set var="title" value="Adding Arguments to Scripts"-->
<!--#include virtual="/includes/template-1-openhead.shtml" -->
<!--#include virtual="/includes/template-2-opensidebar.shtml" -->
<!--#include virtual="/includes/template-3-sidebar.shtml" -->
<!--#include virtual="/includes/template-4-mainbody.shtml" -->

<p>This guide describes how to modify scripts to accept command 
line arguments, and use this functionality for jobs in CHTC.</p>

<h2>Overview and Rationale</h2>

<p>When running jobs in CHTC, it is often advantageous to add a line 
to your script that can capture <i>arguments</i> from the command line.  
An argument is typically the one (or two) value(s) that are different 
for each job you want to run.  By allowing your scripts to use command 
line arguments, you can use the same script for every job, and just 
vary the arguments values.  </p>

<p>In this guide, we will show: 
<ul>
	<li>How to modify your scripts</li>
	<li>Other tricks for using arguments</li>
	<li>How to set arguments in the submit file</li>
</ul>
</p>

<h1>Scripts and Arguments</h1>

<p>Suppose I have a script that does a computation 
with a number of my choice.  If that number is 100 and my script looks like: </p>

<pre class="file">
# script
num = 100

print(sqrt(num))
</pre>

<p>I can run this script on the command line like this: </p>
<pre class="term">$ ./script</pre>

<p>And it should print out the number 10.  However, what if I wanted to run 
this script for various values, besides 100?  What we <i>want</i> is 
something like this:</p>
<pre class="term">$ ./script 100</pre>

<p>Here, we still use the value 100 in our calculation, but we set it 
from the command line, where we run the script, so that it's easy to choose 
a different value, if we want.</p>

<p>The following sections show how to implement this functionality in bash, Matlab, 
Python, and R</p>

<h2>Bash</h2>

Old script: 
<pre class="file">
#!/bin/bash

num=100

echo 'sqrt($num)' | bc
</pre>

New script: 
<pre class="file">
#!/bin/bash

num=$1

echo 'sqrt($num)' | bc
</pre>

<h2>Matlab</h2>

Old script: 

New script: 

<h2>Python</h2>

Old script: 
<pre class="file">
num = 100

import math
print(math.sqrt(num))
</pre>

New script: 
<pre class="file">
import sys
args = sys.argv

num = sys.argv[1]

import math
print(math.sqrt(num))
</pre>

<pre class="term">$ python script.py 100</pre>

Explanation: 
The <code>sys</code> python library has a feature called <code>argv</code>, which 
captures everything from the command line in a list, except the actual python command. 
So if you run the following script: 
<pre class="file">
import sys
args = sys.argv
print(args)
</pre>

like so: 
<pre class="term">python script.py 100 hello TRUE</pre>

you should see: 
<pre class="term">["script.py", "100", "hello", "TRUE"]</pre>

The elements of the list can then be accessed using Python's normal indexing.  

<h2>R</h2>

<pre class="file">
num <- 100

print(sqrt(num))
</pre>

<pre class="file">
args <- commandArgs(TrailingOnly = TRUE)
num <- args[[1]]

print(sqrt(num))
</pre>

<pre class="term">$ R CMD BATCH "--args 100" script.R</pre>
or
<pre class="term">$ Rscript script.R 100</pre>


Explanation: 
The <code>commandArgs()</code> function captures all of the arguments from the 
command line. We can then choose individual arguments using indexing.  

<!--<h1>Other Customization</h1>

<p>Your changing argument can be anything that needs to change with every job -- 
the name of an input variable, the seed for a random number generator, a list of 
parameters -- the list goes on.  <p>

<p>One way to use arguments is as an identifier that tells you which input file 
to open or what name to give an output file.  For example, say you have a list of 
data files where the files have a common suffix and the only thing that changes 
is their date: </p>
<pre>
data/
    2017-08-19_measurements.csv
    2017-09-20_measurements.csv
    2017-10-21_measurements.csv
</pre>

<p>The following section shows how you can use the changing value (the date) 
as an argument, to name open the right input file, and save a unique output 
file.</p>

<h2>Matlab</h2>

<h2>Python</h2>

<pre class="file">
import sys
args = sys.argv
id = sys.argv[1]

input_filename = id+"_measurements.csv"
read(input_filename)
# more code here
output_filename = id+"_measurement_analysis.csv"
data.write(output_filename)
</pre>

<h2>R</h2>

<pre class="file">
args <- commandArgs(trailingOnly = TRUE)
id <- args[[1]]

input_filename <- paste0(id,"_measurements.csv")
read.csv(input_filename)
# more code here
output_filename = paste0(id,"_measurement_analysis.csv")
save.csv(data, output_filename)
</pre>

<h2>Submit File and Executable</h2>-->

<!--#include virtual="/includes/template-5-finish.shtml" -->