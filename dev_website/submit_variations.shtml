<!--#set var="title" value="HTCondor Submit File Variations"-->
<!--#include virtual="/includes/template-1-openhead.shtml" -->
<!--#include virtual="/includes/template-2-opensidebar.shtml" -->
<!--#include virtual="/includes/template-3-sidebar.shtml" -->
<!--#include virtual="/includes/template-4-mainbody.shtml" -->

<br>
<b>The examples and information in this guide work best for the below cases*:</b>
<ol>
<li>Submission to an HTCondor System with file transfer (rather than a shared filesystem).</li>
<li>Submission to an HTCondor System that is unix-based (Linux or Mac operating system, as Windows may have important differences).</li>
</ol>
<small>(*see the HTCondor software manual and online examples from other organizations for cases outside of those we cover on the CHTC website)</small>
</br>
</br>
<b>To best understand the below information, users should already have an understanding of:</b>
<ol>
<li>Using the command line to: navigate within directories, create/copy/move/delete files and directories, and run their intended programs (aka "executables").</li>
<!-- coming soon <li>The CHTCâ€™s Roadmap for High Throughput Computing</li> -->
<li><a href="http://chtc.cs.wisc.edu/helloworld.shtml">The CHTC's Intro to Running HTCondor Jobs</a></li>
<li>The importance of indicating the below submit file lines, which are left
 out of the below examples for simplicity:
<pre>
universe = vanilla    # or other
request_memory = <MB>
request_disk = <KB>
request_cpus = <positive integer>
should_transfer_files = YES
when_to_transfer_output = ON_EXIT    # or other
</ol>  

<!-- Submitting Many Jobs with a Single Submit File -->

<h1>Overview</h1>

One of HTCondor's features is the ability to submit many similar jobs using 
one submit file.  This is accomplished by using: 
<ul>
  <li>a "queue" keyword, that indicates how many jobs to run</li>
  <li><i>variables</i> in the submit file, taking the place of information 
  that will change with each job, such as input files, input directories, or 
  code arguments.  Variables in an HTCondor submit file look like this: 
  <code>$(variable_name)</code></li>
</ul>

There are different ways to "queue" multiple jobs and indicate the difference 
between them using variables.  

<ol>
<li>Number your input files/directories, and use HTCondor's default 
<code>$(Process)</code> variable. </li>
  <ol>
<li><a href="#process-files">Organizing many jobs with integer-numbered filenames</a></li>
<li><a href="#process-initialdir">Organizing job files within integer-numbered directories</a></li>
  </ol>
<li><a href="#own-variables">Use your own variable names</a></li>
<li>Submit many jobs using your own variables</li>
<ol>
<li><a href="#matching">Create jobs matching a file pattern</a></li>
<li><a href="#list">Create jobs from a list</a></li></ol>
<li><a href="#multiple">Use multiple variables</a></li>
</ol>

This guide merely scratches the surface of what is possible when submitting 
many jobs from a submit file.  If you are interested in a particular approach 
that isn't listed here, <a href="mailto:chtc@cs.wisc.edu">contact a Research 
Computing Facilitator</a> and we can advise on the best implementation.  

<h1>Using $(Process)</h1>


<a name="process-files"></a>
<h2>Numbered input files using $(Process)</h2>

<p>This example is most similar to our
 <a href="http://chtc.cs.wisc.edu/helloworld.shtml">Intro to Running HTCondor
 Jobs</a> and uses HTCondor's $(Process) variable to indicate
 filename differences for each job. For "queue <i>N</i>" in the submit file,
 the $(Process) variable will start with
 "0" and end with <i>N</i>-1, such that you can use $(Process) to indicate
 filenames and filepaths. </p>

<pre>
# Submit File
executable = my.exec
arguments = $(Process).data comparison.data $(Process).myout
transfer_input_files = $(Process).data,comparison.data

log = $(Process).log
queue 3
</pre>

Here the "queue 3" line will create 3 jobs, each with a different "Process" 
number, which will replace <code>$(Process)</code> in the submit file above.  
The submit node directories (before and after the job runs) and execute 
node directory for one job are shown below.  
<br>

<!-- this "directory" class for these tables is at the end of web.css-->
<table class="directory">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>After completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/	
    submit.file
    my.exec
    comparison.data
    0.data
    1.data
    2.data
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/	
    my.exec
    0.data
    comparison.data
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/ 	
    submit.file
    my.exec
    comparison.data
    0.data  0.myout  0.log
    1.data  1.myout  0.log
    2.data  2.myout  0.log
</pre> </td>
</tr>
</table>

</br>

<a name="process-initialdir"></a>
<h2>Numbered directories using $(Process) as the InitialDir</h2>
<p>Most users prefer using "IntitialDir" to organize all job data, including
 files created within the job, as opposed to the previous method. Below,
 HTCondor's "InitialDir"
 variable is used to set the initial directory of <i>each</i> job, establishing
 the location for log/output/error, as well as input files needed by the job and
 any files produced by the job.</br>
<b>NOTE that HTCondor still expects the executable to exist relative to
 submission directory.</b></p>

<pre>
# Submit File
executable = my.exec
arguments = input.data comparison.data my.out
InitialDir = $(Process)
transfer_input_files = input.data,../comparison.data

log = job.log
queue 3
</pre>

Here the "queue 3" line will create 3 jobs, but instead of different 
numbered files, each job will be submitted out of a different numbered 
directory.  Therefore, each job will get a different <code>input.data</code>
file, out of each different numbered directory.  

The submit node directories (before and after the job runs) and execute 
node directory for one job are shown below.  

<table class="triple">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>After completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    comparison.data
    0/  input.data
    1/  input.data
    2/  input.data
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/ 
    my.exec
    input.data
    comparison.data
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    comparison.data
    0/  input.data
        my.out
        job.log
    1/  input.data
        my.out
        job.log
    2/  input.data
        my.out
        job.log
</pre> </td>
</tr>
</table>

</br>

<blockquote>
<h3>Starting at One</h3>

<p>What if your files are numbered 1 - 100 instead of 0 - 99?  Instead of renaming your 
files, you can do the following.  In your submit file, use: </p>
<pre>plusone = $(Process) + 1
NewProcess = $INT(plusone, %d)</pre>

<p>Then use <code>$(NewProcess)</code> anywhere in the submit file that you would have
normally used <code>$(Process)</code>.  </p>

<p>Note that there is nothing special about the names <code>plusone</code> and 
<code>NewProcess</code> - you can use any names you want as variables.  
</blockquote>

<a name="own-variables"></a>
<h1>Using your own non-HTCondor variables in the submit file </h1>

<p>You can define your own variable(s), named as you like, for use
 throughout the submit file. Just make sure to not use a built-in
 variable that is already used by HTCondor ("output" for example).</p>

<p>Rather than creating multiple submit files for individual jobs
 or having to number your files, it is possible to write a single
 submit file that uses different non-numbered files by adding
  multiple "queue" statements.

<p>Essentially, the submit file establishes a set of
 overall submit file lines, but in combination with a set of
 submit file lines that are redefined with each instance of
 "queue <i>N</i>".  An example is given below: 
</p>

<pre>
# Submit File
executable = my.exec
arguments = $(state).data comparison.data my_$(state).out
transfer_input_files = $(state).data,comparison.data

log = $(state).log

state = iowa
queue 1

state = missouri
queue 1

state = wisconsin
queue 1
</pre>


<table class="triple">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>Submit directory after completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    comparison.data
    iowa.data
    missouri.data
    wisconsin.data
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/ 
    my.exec
    iowa.data
    comparison.data
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/ 
    submit.file
    my.exec
    comparison.data
    iowa.data  
    iowa.log
    missouri.data
    missouri.log
    wisconsin.data 
    wisconsin.log
    my_iowa.out
    my_missouri.out
    my_wisconsin.out
</pre> </td>
</tr>
</table>

<h1>Automated Submission with Unique Variables</h1>

<p><a href="#own-variables">The previous example</a> is great for unique 
file or directory names, but would be tedious when submitting many 
thousands of jobs.  We would like an automated way to submit many 
jobs at once that uses our own variable names.  </p>

<p>There are three 
ways to do this, using different "queue" statements in your submit file.  In the 
examples below, we have used the same directory 
structure as in <a href="#process-files">numbered input 
files</a>, but the same ideas could be applied to setting the "InitialDir" of a job (as 
in <a href="#process-initialdir">this section</a>), 
or using variables elsewhere in the submit file.  </p>

<a name="matching"></a>
<h2>Create jobs "matching" a file pattern</h2>

This method of submission creates a job for each file or directory that 
matches the pattern provided in your submit file.  

<pre>
# Submit File
executable = my.exec
arguments = $(state) comparison.data my_$(state).out
transfer_input_files = $(state),comparison.data

log = $(state).log

queue state matching *.data
</pre>

<p>In this case, the pattern 
is <code>*.data</code>; so a job will be created for each file that ends 
with the "data" suffix.  We've used 
the <code>$(state)</code> variable to indicate which files to transfer and 
to name the log and output files.  </p>

<table class="triple">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>Submit directory after completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    comparison.data
    iowa.data
    missouri.data
    wisconsin.data
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/ 
    my.exec
    iowa.data
    comparison.data
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/ 
    submit.file
    my.exec
    comparison.data
    iowa.data  
    iowa.log
    missouri.data
    missouri.log
    wisconsin.data 
    wisconsin.log
    my_iowa.data.out
    my_missouri.data.out
    my_wisconsin.data.out
</pre> </td>
</tr>
</table>

<a name="list"></a>
<h2>Create jobs from a list</h2>

There are two ways to provide a list of values you'd like 
to use when creating jobs. 

<a name="in"></a>
<h3>Create jobs from a list written into the submit file</h3> 

<br>
<pre>
# Submit File
executable = my.exec
arguments = $(state).data comparison.data my_$(state).out
transfer_input_files = $(state).data,comparison.data

log = $(state).log

queue state in (iowa missouri wisconsin)
</pre>

Here, we wanted to create a job for each state, and we made a list of the states 
within the submit file, using the line <code>queue .. in</code>.  

<a name="from"></a>
<h3>Create jobs from a list written to a file</h3>

<br>

<pre>
# Submit File
executable = my.exec
arguments = $(state).data comparison.data my_$(state).out
transfer_input_files = $(state).data,comparison.data

log = $(state).log

queue state from state_list.txt
</pre>

<b><code>state_list.txt</code></b>
<pre>
iowa
missouri
wisconsin
</pre>

Here, we wanted to create a job for each state, and we made a list of the states 
in a separate file called <code>state_list.txt</code>.  A job will be 
created for each line in this file, using the <code>queue .. from</code> line. 

<p>In both of the cases above, we have used the word "state" as our variable, 
and have used it to transfer the appropriate files, name output, and provide 
arguments.  For both cases, the submission directory and working 
directory for the job would look like this: </p>

<table class="triple">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>Submit directory after completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    comparison.data
    iowa.data
    missouri.data
    wisconsin.data
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/ 
    my.exec
    iowa.data
    comparison.data
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/ 
    submit.file
    my.exec
    comparison.data
    iowa.data  
    iowa.log
    missouri.data
    missouri.log
    wisconsin.data 
    wisconsin.log
    my_iowa.out
    my_missouri.out
    my_wisconsin.out
</pre> </td>
</tr>
</table>

<!-- Fancy submission
multiple jobs w/ initial dir
nested directories
multiple variables.  
-->

<a name="multiple"></a>
<h1>Using multiple variables</h1>

<p>The method of job submission shown above in a <a href="#from">queue ... from</a> 
statement can also be used to submit jobs using multiple variables.  For example, 
suppose you have a set of data files and want to run a pairwise comparison 
between all of them.  You can list all the pairs in a separate file, and then 
use that file to queue jobs, where each half of a pair is referred to using a 
specific variable. </p>

<pre>
executable = my.exec
arguments = $(first).txt $(second).txt my_$(first)$(second).out
transfer_input_files = $(first).txt, $(second).txt

log = $(first)$(second).log

queue first,second from compare_list.txt
</pre>

<b><code>compare_list.txt</code></b>
<pre>
A, B
A, C
A, D
B, C
B, D
C, D
</pre>

<table class="triple">
<tr>  
<th>Submit directory before submitting</th>
<th>Job working directory after input transfer, before execution</th>
<th>Submit directory after completion</th>
</tr>
<tr>
<td class="triple"><pre class="sub">
(submit_dir)/
    submit.file
    my.exec
    A.txt
    B.txt
    C.txt
    D.txt
</pre></td>
<td class="triple"><pre class="exec">
(working_dir)/ 
    my.exec
    A.txt
    B.txt
    (other HTCondor files)
</pre></td>
<td class="triple"><pre class="sub">
(submit_dir)/ 
    submit.file
    my.exec
    A.txt
    B.txt
    C.txt
    D.txt
    AB.log my_AB.out
    AC.log my_AC.out
    AD.log my_AD.out
    BC.log my_BC.out
    BD.log my_BD.out
    CD.log my_CD.out
</pre> </td>
</tr>
</table>


<!--#include virtual="/includes/template-5-finish.shtml" -->
